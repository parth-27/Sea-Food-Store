{"ast":null,"code":"var _jsxFileName = \"/home/pal/Desktop/react-beginner/src/components/App.js\";\nimport React from 'react';\nimport Header from './Header';\nimport Inventory from './Inventory';\nimport Order from './Order';\nimport sampleFishes from './../sample-fishes';\nimport Fish from './Fish';\nimport { object } from 'prop-types';\nimport base from '../base';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.addFish = this.addFish.bind(this);\n    this.updateFish = this.updateFish.bind(this);\n    this.removeFish = this.removeFish.bind(this);\n    this.loadSamples = this.loadSamples.bind(this);\n    this.addToOrder = this.addToOrder.bind(this);\n    this.removeFromOrder = this.removeFromOrder.bind(this); // getinitial state.\n\n    this.state = {\n      fishes: {},\n      // we are syncing fishes to the firebase.\n      order: {} // we are not syncing order to the firebase. But we are syncing to the localStorage.\n\n    };\n  }\n\n  componentWillMount() {\n    // this run right before the app is render\n    this.ref = base.syncState(`${this.props.match.params.storeId}/fishes`, {\n      context: this,\n      state: 'fishes'\n    }); // check if there is any order in localstorage.\n\n    const localStorageRef = localStorage.getItem(`order-${this.props.match.params.storeId}`);\n\n    if (localStorageRef) {\n      // update our APP componen's order state\n      this.setState({\n        order: JSON.parse(localStorageRef) // first converting localStorageREf to object and than storing it.\n\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    base.removeBinding(this.ref);\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    localStorage.setItem(`order-${this.props.match.params.storeId}`, JSON.stringify(nextState.order)); // converting nextState.order to string using json method.\n  }\n\n  addFish(fish) {\n    // update our state. First take copy of the current state than update the state.\n    const fishes = { ...this.state.fishes\n    }; // add in our new fishes.\n\n    const timestamp = Date.now();\n    fishes[`fishes-${timestamp}`] = fish; // set state.\n\n    this.setState({\n      fishes: fishes\n    });\n  }\n\n  loadSamples() {\n    this.setState({\n      fishes: sampleFishes\n    });\n  }\n\n  addToOrder(key) {\n    // take a copy of the state.\n    const order = { ...this.state.order\n    }; // update or add new number of fish ordered.\n\n    order[key] = order[key] + 1 || 1; // set state.\n\n    this.setState({\n      order: order\n    });\n  }\n\n  updateFish(key, updatedFish) {\n    const fishes = { ...this.state.fishes\n    };\n    fishes[key] = updatedFish;\n    this.setState({\n      fishes\n    }); // destructutring.\n  }\n\n  removeFish(key) {\n    const fishes = { ...this.state.fishes\n    };\n    fishes[key] = null; // we can't use delete becuase of the firebase.\n\n    this.setState({\n      fishes\n    });\n  }\n\n  removeFromOrder(key) {\n    const order = { ...this.state.order\n    };\n    delete order[key]; // we can use delete because order is store in localstorage and not in firebase.\n\n    this.setState({\n      order\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"catch-of-the-day\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      tagline: \"Fresh Sea Food Market\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"list-of-fishes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 6\n      }\n    }, Object.keys(this.state.fishes).map(key => /*#__PURE__*/React.createElement(Fish, {\n      key: key,\n      index: key,\n      details: this.state.fishes[key],\n      addToOrder: this.addToOrder,\n      params: this.props.match.params,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }\n    })))), /*#__PURE__*/React.createElement(Order, {\n      fishes: this.state.fishes,\n      order: this.state.order,\n      removeFromOrder: this.removeFromOrder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Inventory, {\n      addFish: this.addFish,\n      loadSamples: this.loadSamples,\n      fishes: this.state.fishes,\n      updateFish: this.updateFish,\n      removeFish: this.removeFish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/pal/Desktop/react-beginner/src/components/App.js"],"names":["React","Header","Inventory","Order","sampleFishes","Fish","object","base","App","Component","constructor","addFish","bind","updateFish","removeFish","loadSamples","addToOrder","removeFromOrder","state","fishes","order","componentWillMount","ref","syncState","props","match","params","storeId","context","localStorageRef","localStorage","getItem","setState","JSON","parse","componentWillUnmount","removeBinding","componentWillUpdate","nextProps","nextState","setItem","stringify","fish","timestamp","Date","now","key","updatedFish","render","Object","keys","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Header from './Header';\nimport Inventory from './Inventory';\nimport Order from './Order';\nimport sampleFishes from './../sample-fishes'; \nimport Fish from './Fish';\nimport { object } from 'prop-types';\nimport base from '../base';\n\nclass App extends React.Component {\n\t\n\tconstructor(){\n\t\tsuper();\n\n\t\tthis.addFish = this.addFish.bind(this);\n\t\tthis.updateFish = this.updateFish.bind(this);\n\t\tthis.removeFish = this.removeFish.bind(this);\n\t\tthis.loadSamples = this.loadSamples.bind(this);\n\t\tthis.addToOrder = this.addToOrder.bind(this);\n\t\tthis.removeFromOrder = this.removeFromOrder.bind(this);\n\n\t\t// getinitial state.\n\t\tthis.state = {\n\t\t\tfishes: {},\t\t// we are syncing fishes to the firebase.\n\t\t\torder:{},\t// we are not syncing order to the firebase. But we are syncing to the localStorage.\n\n\t\t}\n\t}\n\t\n\tcomponentWillMount(){\n\t\t// this run right before the app is render\n\t\tthis.ref = base.syncState(`${this.props.match.params.storeId}/fishes`,{\n\t\t\tcontext:this,\n\t\t\tstate: 'fishes'\n\t\t});\n\n\t\t// check if there is any order in localstorage.\n\t\tconst localStorageRef = localStorage.getItem(`order-${this.props.match.params.storeId}`);\n\n\t\tif (localStorageRef) {\n\t\t\t// update our APP componen's order state\n\t\t\tthis.setState({\n\t\t\t\torder: JSON.parse(localStorageRef)\t\t// first converting localStorageREf to object and than storing it.\n\t\t\t})\n\t\t}\n\t}\n\n\tcomponentWillUnmount(){\n\t\tbase.removeBinding(this.ref);\n\t}\n\n\tcomponentWillUpdate(nextProps,nextState){\n\t\tlocalStorage.setItem(`order-${this.props.match.params.storeId}`,\n\t\tJSON.stringify(nextState.order));\t// converting nextState.order to string using json method.\n\t}\n\n\n\taddFish(fish){\n\t\t// update our state. First take copy of the current state than update the state.\n\t\tconst fishes = {...this.state.fishes};\n\t\t// add in our new fishes.\n\t\tconst timestamp = Date.now();\n\t\tfishes[`fishes-${timestamp}`] = fish;\n\n\n\t\t// set state.\n\t\tthis.setState({fishes:fishes})\n\t}\n\n\tloadSamples(){\n\t\tthis.setState({\n\t\t\tfishes: sampleFishes\n\t\t});\n\t}\n\n\taddToOrder(key){\n\t\t// take a copy of the state.\n\t\tconst order = {...this.state.order};\n\n\t\t// update or add new number of fish ordered.\n\t\torder[key] = order[key] + 1 || 1; \n\n\t\t// set state.\n\t\tthis.setState({order:order});\n\t}\n\n\tupdateFish(key,updatedFish)\n\t{\n\t\tconst fishes = {...this.state.fishes}\n\t\tfishes[key] = updatedFish;\n\t\tthis.setState({fishes});\t// destructutring.\n\t}\n\n\tremoveFish(key){\n\t\tconst fishes = {...this.state.fishes};\n\n\t\tfishes[key] = null;\t\t// we can't use delete becuase of the firebase.\n\t\tthis.setState({fishes});\n\t}\n\n\tremoveFromOrder(key){\n\t\tconst order = {...this.state.order};\n\t\tdelete order[key];\t// we can use delete because order is store in localstorage and not in firebase.\n\t\tthis.setState({order});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"catch-of-the-day\">\n\t\t\t\t<div className=\"menu\">\n\t\t\t\t\t<Header tagline=\"Fresh Sea Food Market\"/>\n\t\t\t\t\t<ul className=\"list-of-fishes\">\n\t\t\t\t\t\t{/* For looping over something in react we need and array and use map method on it. */}\n\t\t\t\t\t\t{Object\n\t\t\t\t\t\t.keys(this.state.fishes)\n\t\t\t\t\t\t.map(key => <Fish key={key} index={key} details = {this.state.fishes[key]} addToOrder={this.addToOrder}\n\t\t\t\t\t\t\tparams={this.props.match.params}\n\t\t\t\t\t\t/>)\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t\t{/* here we have made tagline as props which will be available to use in the components for fetching the data */}\n\t\t\t\t</div>\n\t\t\t\t<Order fishes={this.state.fishes} order={this.state.order}\n\t\t\t\t\tremoveFromOrder={this.removeFromOrder}\n\t\t\t\t/>\n\t\t\t\t<Inventory \n\t\t\t\taddFish={this.addFish} \n\t\t\t\tloadSamples={this.loadSamples} \n\t\t\t\tfishes={this.state.fishes}\n\t\t\t\tupdateFish={this.updateFish}\n\t\t\t\tremoveFish={this.removeFish}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}