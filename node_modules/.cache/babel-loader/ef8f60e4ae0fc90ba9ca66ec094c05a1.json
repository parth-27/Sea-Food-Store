{"ast":null,"code":"var _jsxFileName = \"/home/pal/Desktop/react-beginner/src/components/Inventory.js\";\nimport React from 'react';\nimport AddFishForm from './AddFishForm';\nimport PropTypes from 'prop-types';\nimport base from '../base';\nimport firebase from 'firebase';\n\nclass Inventory extends React.Component {\n  constructor() {\n    super();\n    this.uiConfig = {\n      signInFlow: \"popup\",\n      signInOptions: [// firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.FacebookAuthProvider.PROVIDER_ID, firebase.auth.TwitterAuthProvider.PROVIDER_ID, firebase.auth.GithubAuthProvider.PROVIDER_ID //firebase.auth.EmailAuthProvider.PROVIDER_ID\n      ],\n      callbacks: {\n        signInSuccess: () => false\n      }\n    };\n\n    this.authHandler = async authData => {\n      // 1 .Look up the current store in the firebase database\n      const store = await base.fetch(this.props.storeId, {\n        context: this\n      });\n      console.log(store); // 2. Claim it if there is no owner\n\n      if (!store.owner) {\n        // save it as our own\n        await base.post(`${this.props.storeId}/owner`, {\n          data: authData.user.uid\n        });\n      } // 3. Set the state of the inventory component to reflect the current user\n\n\n      this.setState({\n        uid: authData.user.uid,\n        owner: store.owner || authData.user.uid\n      });\n    };\n\n    this.authenticate = provider => {\n      const authProvider = new firebase.auth[`${provider}AuthProvider`]();\n      firebaseApp.auth().signInWithPopup(authProvider).then(this.authHandler);\n    };\n\n    this.renderInventory = this.renderInventory.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.renderLogin = this.renderLogin.bind(this);\n    this.authenticate = this.authenticate.bind(this);\n    this.authHandler = this.this.logout = this.logout.bind(this);\n    this.state = {\n      uid: null,\n      owner: null\n    };\n  } // life cycle hooks.\n\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.authHandler({\n          user\n        });\n      }\n    });\n  }\n\n  handleChange(e, key) {\n    const fish = this.props.fishes[key];\n    const updatedFish = { ...fish,\n      [e.target.name]: e.target.value\n    };\n    this.props.updateFish(key, updatedFish);\n  }\n\n  renderInventory(key) {\n    const fish = this.props.fishes[key];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fish-edit\",\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      value: fish.name,\n      placeholder: \"Fish Name\",\n      onChange: e => this.handleChange(e, key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"price\",\n      value: fish.price,\n      placeholder: \"Fish Price\",\n      onChange: e => this.handleChange(e, key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"status\",\n      value: fish.status,\n      placeholder: \"Fish Status\",\n      onChange: e => this.handleChange(e, key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"available\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, \"Fresh!\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"unavailable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, \"Sold Out!\")), /*#__PURE__*/React.createElement(\"textarea\", {\n      type: \"text\",\n      name: \"desc\",\n      value: fish.desc,\n      placeholder: \"Fish Desc\",\n      onChange: e => this.handleChange(e, key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"image\",\n      value: fish.image,\n      placeholder: \"Fish Image\",\n      onChange: e => this.handleChange(e, key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.props.removeFish(key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, \"Remove Fish\"));\n  }\n\n  // authenticate = (provider) => {\n  //     console.log(`Trying to login with ${provider}`);\n  //     console.log(this.props.storeId);\n  //     if (provider === 'github') {\n  //         var provider = new firebase.auth.GithubAuthProvider();\n  //         provider.addScope('repo');\n  //         firebase.auth().signInWithPopup(provider).then( (result) => {\n  //             console.log(result);\n  //             // grab the store info if the user has successfully authenticate.\n  //             const storeRef = firebase.database().ref(this.props.storeId);\n  //             // query the firebase once for the data\n  //             storeRef.once('value', (snapshot) => {\n  //                 const data = snapshot.val() || {};\n  //                 // claim it as our own if there is no owner already.\n  //                 if (!data.owner) {\n  //                     storeRef.set({\n  //                         owner: result.user.uid\n  //                     });\n  //                 }\n  //                 this.setState({\n  //                     uid: result.user.uid,\n  //                     owner: data.owner || result.user.uid\n  //                 })\n  //             });\n  //         }).catch(function (error) {\n  //             console.log(error);\n  //         });    \n  //     }\n  //     else if (provider === 'facebook') {\n  //         var provider = new firebase.auth.FacebookAuthProvider();\n  //         provider.addScope('user_birthday');\n  //         firebase.auth().signInWithPopup(provider).then( (authData) => {\n  //             console.log(authData);\n  //             // grab the store info if the user has successfully authenticate.\n  //             const storeRef = firebase.database().ref(this.props.storeId);\n  //             // query the firebase once for the data\n  //             storeRef.once('value', (snapshot) => {\n  //                 const data = snapshot.val() || {};\n  //                 // claim it as our own if there is no owner already.\n  //                 if (!data.owner) {\n  //                     storeRef.set({\n  //                         owner: authData.user.uid\n  //                     });\n  //                 }\n  //                 this.setState({\n  //                     uid: authData.user.uid,\n  //                     owner: data.owner || authData.user.uid\n  //                 })\n  //             });\n  //         }).catch(function (error) {\n  //             console.log(error);\n  //         });\n  //     }\n  //     else\n  //     {\n  //         var provider = new firebase.auth.TwitterAuthProvider();\n  //         // here we have to use arrow functions because in normal functions storeId won't be accessible because of this keyword.\n  //         firebase.auth().signInWithPopup(provider).then( (authData) => {\n  //             console.log(authData);\n  //             // grab the store info if the user has successfully authenticate.\n  //             const storeRef = firebase.database().ref(this.props.storeId);\n  //             // query the firebase once for the data\n  //             storeRef.once('value', (snapshot) => {\n  //                 const data = snapshot.val() || {};\n  //                 // claim it as our own if there is no owner already.\n  //                 if (!data.owner) {\n  //                     storeRef.set({\n  //                         owner: authData.user.uid\n  //                     });\n  //                 }\n  //                 this.setState({\n  //                     uid: authData.user.uid,\n  //                     owner: data.owner || authData.user.uid\n  //                 })\n  //             });\n  //         }).catch(function (error) {\n  //             console.log(error);\n  //         });\n  //     }\n  //     //base.AuthWithOAuthPopup(provider,this.authHandler); \n  // }\n  // logout method\n  logout() {\n    firebase.unauth();\n    this.setState({\n      uid: null\n    });\n  }\n\n  renderLogin() {\n    return /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }, \"Inventory\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, \"Sign in to manage your store's inventory\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"github\",\n      onClick: () => this.authenticate('github'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }, \"Log In with Github\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"facebook\",\n      onClick: () => this.authenticate('facebook'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, \"Log In with Facebook\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"twitter\",\n      onClick: () => this.authenticate('twitter'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }\n    }, \"Log In with Twitter\"));\n  }\n\n  render() {\n    const logout = /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.logout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 24\n      }\n    }, \"Log Out!!\"); //check if they are not logged in at all\n\n    if (!this.state.uid) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 20\n        }\n      }, this.renderLogin());\n    } // check if they are the owner of the current store.\n\n\n    if (this.state.uid !== this.state.owner) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }\n      }, \"Sorry you are not the owner of the Store\"), logout);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }\n    }, \"Inventory\"), logout, Object.keys(this.props.fishes).map(this.renderInventory), /*#__PURE__*/React.createElement(AddFishForm, {\n      addFish: this.props.addFish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.loadSamples,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }\n    }, \"load Sample Fishes\"));\n  }\n\n}\n\nInventory.propTypes = {\n  fishes: PropTypes.object.isRequired,\n  updateFish: PropTypes.func.isRequired,\n  removeFish: PropTypes.func.isRequired,\n  addFish: PropTypes.func.isRequired,\n  loadSamples: PropTypes.func.isRequired,\n  storeId: PropTypes.string.isRequired\n};\nexport default Inventory;","map":{"version":3,"sources":["/home/pal/Desktop/react-beginner/src/components/Inventory.js"],"names":["React","AddFishForm","PropTypes","base","firebase","Inventory","Component","constructor","uiConfig","signInFlow","signInOptions","auth","FacebookAuthProvider","PROVIDER_ID","TwitterAuthProvider","GithubAuthProvider","callbacks","signInSuccess","authHandler","authData","store","fetch","props","storeId","context","console","log","owner","post","data","user","uid","setState","authenticate","provider","authProvider","firebaseApp","signInWithPopup","then","renderInventory","bind","handleChange","renderLogin","this","logout","state","componentDidMount","onAuthStateChanged","e","key","fish","fishes","updatedFish","target","name","value","updateFish","price","status","desc","image","removeFish","unauth","render","Object","keys","map","addFish","loadSamples","propTypes","object","isRequired","func","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AddFishForm from './AddFishForm';\nimport PropTypes from 'prop-types';\nimport base from '../base';\nimport firebase from 'firebase';\n\nclass Inventory extends React.Component {\n\n    uiConfig = {\n        signInFlow: \"popup\",\n        signInOptions: [\n            // firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n            firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n            firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n            firebase.auth.GithubAuthProvider.PROVIDER_ID,\n            //firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            signInSuccess: () => false\n        }\n    }\n\n\n    constructor() {\n        super();\n        this.renderInventory = this.renderInventory.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.renderLogin = this.renderLogin.bind(this);\n        this.authenticate = this.authenticate.bind(this);\n        this.authHandler=this.\n        this.logout = this.logout.bind(this);\n        this.state = {\n            uid:null,\n            owner:null\n        }\n    }\n\n    // life cycle hooks.\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged(user => {\n            if (user) {\n                this.authHandler({ user });\n            }\n        });\n    }\n\n    handleChange(e, key) {\n        const fish = this.props.fishes[key];\n\n        const updatedFish = {\n            ...fish\n            , [e.target.name]: e.target.value\n        };\n\n        this.props.updateFish(key, updatedFish);\n    }\n\n    renderInventory(key) {\n        const fish = this.props.fishes[key];\n        return (\n            <div className=\"fish-edit\" key={key}>\n\n                <input type=\"text\" name=\"name\" value={fish.name} placeholder=\"Fish Name\" onChange={(e) => this.handleChange(e, key)} />\n                <input type=\"text\" name=\"price\" value={fish.price} placeholder=\"Fish Price\" onChange={(e) => this.handleChange(e, key)} />\n                <select type=\"text\" name=\"status\" value={fish.status} placeholder=\"Fish Status\" onChange={(e) => this.handleChange(e, key)}>\n                    <option value=\"available\" >Fresh!</option>\n                    <option value=\"unavailable\" >Sold Out!</option>\n                </select>\n                <textarea type=\"text\" name=\"desc\" value={fish.desc} placeholder=\"Fish Desc\" onChange={(e) => this.handleChange(e, key)}>\n                </textarea>\n                <input type=\"text\" name=\"image\" value={fish.image} placeholder=\"Fish Image\" onChange={(e) => this.handleChange(e, key)} />\n                <button onClick={() => this.props.removeFish(key)}>Remove Fish</button>\n            </div>\n        )\n    }\n\n    \n    authHandler = async authData => {\n        // 1 .Look up the current store in the firebase database\n        const store = await base.fetch(this.props.storeId, { context: this });\n        console.log(store);\n        // 2. Claim it if there is no owner\n        if (!store.owner) {\n            // save it as our own\n            await base.post(`${this.props.storeId}/owner`, {\n                data: authData.user.uid\n            });\n        }\n        // 3. Set the state of the inventory component to reflect the current user\n        this.setState({\n            uid: authData.user.uid,\n            owner: store.owner || authData.user.uid\n        });\n    };\n\n    authenticate = provider => {\n        const authProvider = new firebase.auth[`${provider}AuthProvider`]();\n        firebaseApp\n            .auth()\n            .signInWithPopup(authProvider)\n            .then(this.authHandler);\n    };\n\n    \n    // authenticate = (provider) => {\n    //     console.log(`Trying to login with ${provider}`);\n    //     console.log(this.props.storeId);\n    //     if (provider === 'github') {\n    //         var provider = new firebase.auth.GithubAuthProvider();\n\n    //         provider.addScope('repo');\n\n    //         firebase.auth().signInWithPopup(provider).then( (result) => {\n    //             console.log(result);\n\n    //             // grab the store info if the user has successfully authenticate.\n    //             const storeRef = firebase.database().ref(this.props.storeId);\n\n    //             // query the firebase once for the data\n    //             storeRef.once('value', (snapshot) => {\n    //                 const data = snapshot.val() || {};\n\n    //                 // claim it as our own if there is no owner already.\n    //                 if (!data.owner) {\n    //                     storeRef.set({\n    //                         owner: result.user.uid\n    //                     });\n    //                 }\n\n    //                 this.setState({\n    //                     uid: result.user.uid,\n    //                     owner: data.owner || result.user.uid\n    //                 })\n    //             });\n\n    //         }).catch(function (error) {\n    //             console.log(error);\n    //         });    \n    //     }\n    //     else if (provider === 'facebook') {\n    //         var provider = new firebase.auth.FacebookAuthProvider();\n\n    //         provider.addScope('user_birthday');\n\n    //         firebase.auth().signInWithPopup(provider).then( (authData) => {\n    //             console.log(authData);\n\n    //             // grab the store info if the user has successfully authenticate.\n    //             const storeRef = firebase.database().ref(this.props.storeId);\n\n    //             // query the firebase once for the data\n    //             storeRef.once('value', (snapshot) => {\n    //                 const data = snapshot.val() || {};\n\n    //                 // claim it as our own if there is no owner already.\n    //                 if (!data.owner) {\n    //                     storeRef.set({\n    //                         owner: authData.user.uid\n    //                     });\n    //                 }\n\n    //                 this.setState({\n    //                     uid: authData.user.uid,\n    //                     owner: data.owner || authData.user.uid\n    //                 })\n    //             });\n\n    //         }).catch(function (error) {\n    //             console.log(error);\n    //         });\n    //     }\n    //     else\n    //     {\n    //         var provider = new firebase.auth.TwitterAuthProvider();\n\n    //         // here we have to use arrow functions because in normal functions storeId won't be accessible because of this keyword.\n    //         firebase.auth().signInWithPopup(provider).then( (authData) => {\n    //             console.log(authData);\n\n    //             // grab the store info if the user has successfully authenticate.\n    //             const storeRef = firebase.database().ref(this.props.storeId);\n\n    //             // query the firebase once for the data\n    //             storeRef.once('value', (snapshot) => {\n    //                 const data = snapshot.val() || {};\n\n    //                 // claim it as our own if there is no owner already.\n    //                 if (!data.owner) {\n    //                     storeRef.set({\n    //                         owner: authData.user.uid\n    //                     });\n    //                 }\n\n    //                 this.setState({\n    //                     uid: authData.user.uid,\n    //                     owner: data.owner || authData.user.uid\n    //                 })\n    //             });\n\n    //         }).catch(function (error) {\n    //             console.log(error);\n    //         });\n    //     }\n\n    //     //base.AuthWithOAuthPopup(provider,this.authHandler); \n        \n    // }\n\n    \n    // logout method\n    logout() {\n        firebase.unauth();\n        this.setState({ uid: null });\n    }\n\n\n    renderLogin() {\n        return (\n            <nav className=\"login\">\n                <h2>Inventory</h2>\n                <p>Sign in to manage your store's inventory</p>\n                <button className=\"github\" onClick={() => this.authenticate('github')}>Log In with Github</button>\n                <button className=\"facebook\" onClick={() => this.authenticate('facebook')} >Log In with Facebook</button>\n                <button className=\"twitter\" onClick={() => this.authenticate('twitter')} >Log In with Twitter</button>\n            </nav>\n        )\n    }\n\n    render() {\n        const logout = <button onClick={this.logout}>Log Out!!</button>\n\n\n        //check if they are not logged in at all\n        if (!this.state.uid) {\n            return <div>{this.renderLogin()}</div>\n        }\n\n        // check if they are the owner of the current store.\n        if(this.state.uid !== this.state.owner){\n            return(\n                <div>\n                    <p>Sorry you are not the owner of the Store</p>\n                    {logout}\n                </div>\n            )\n        }    \n\n\n        return (\n            <div>\n                <h2>Inventory</h2>\n                {logout}\n                {Object.keys(this.props.fishes).map(this.renderInventory)}\n                <AddFishForm addFish={this.props.addFish} />\n                <button onClick={this.props.loadSamples}>load Sample Fishes</button>\n            </div>\n\n        )\n    }\n}\n\nInventory.propTypes = {\n    fishes: PropTypes.object.isRequired,\n    updateFish: PropTypes.func.isRequired,\n    removeFish: PropTypes.func.isRequired,\n    addFish: PropTypes.func.isRequired,\n    loadSamples: PropTypes.func.isRequired,\n    storeId: PropTypes.string.isRequired,\n};\n\nexport default Inventory;"]},"metadata":{},"sourceType":"module"}